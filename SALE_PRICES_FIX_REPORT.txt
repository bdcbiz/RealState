╔═══════════════════════════════════════════════════════════════════════════╗
║           Sale Prices Fix - Complete Report                               ║
╚═══════════════════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔍 PROBLEM IDENTIFIED:

The old_price and new_price fields in the sales table are NULL in the database,
but appear to show values in Filament admin panel.

Root Causes Found:
1. Units have NO prices (normal_price and unit_total_with_finish_price are NULL)
2. Filament form tries to auto-fill old_price from unit → fails because unit has no price
3. Without old_price, new_price calculation also fails
4. Values appear in Filament UI due to reactive form fields, but don't persist to DB

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📋 INVESTIGATION RESULTS:

Database Status:
┌────────┬────────────┬────────────┬────────────────┐
│ Sale ID│ Sale Name  │ Old Price  │ New Price      │
├────────┼────────────┼────────────┼────────────────┤
│ 1      │ malak      │ NULL       │ NULL           │
│ 2      │ sale2      │ NULL       │ NULL           │
│ 3      │ sale 3     │ NULL       │ NULL           │
└────────┴────────────┴────────────┴────────────────┘

Unit Prices (for these sales):
  - Unit for Sale 1: normal_price = NULL, unit_total_with_finish_price = NULL
  - Unit for Sale 2: normal_price = NULL, unit_total_with_finish_price = NULL
  - Unit for Sale 3: normal_price = NULL, unit_total_with_finish_price = NULL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ SOLUTION IMPLEMENTED:

1. Added Model Observer to Sale Model
   Location: app/Models/Sale.php (lines 39-67)

   What it does:
   - Automatically calculates new_price from old_price and discount_percentage
   - Tries to auto-fill old_price from unit price if not provided
   - Ensures prices are ALWAYS saved to database when sale is created/updated

   Code Added:
   ┌──────────────────────────────────────────────────────────────┐
   │ protected static function boot()                             │
   │ {                                                            │
   │     parent::boot();                                          │
   │                                                              │
   │     static::saving(function () {                        │
   │         // Auto-calculate new_price if old_price exists      │
   │         if (->old_price && ->discount_percentage) {│
   │             ->new_price = ->old_price -            │
   │                 (->old_price * ->discount_%/100);  │
   │         }                                                    │
   │                                                              │
   │         // Auto-fill old_price from unit if missing          │
   │         if (->unit_id && !->old_price) {           │
   │              = Unit::find(->unit_id);              │
   │             if ( && ->normal_price) {              │
   │                 ->old_price = ->normal_price;      │
   │                 ->new_price = ... (calculate)           │
   │             }                                                │
   │         }                                                    │
   │     });                                                      │
   │ }                                                            │
   └──────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔧 HOW IT WORKS NOW:

Scenario 1: Unit HAS a price
  1. User selects unit in Filament → old_price auto-fills from unit
  2. User enters discount % → new_price auto-calculates
  3. On save → Model observer ensures both prices save to DB ✅

Scenario 2: Unit has NO price (current situation)
  1. User selects unit → old_price field is empty
  2. User manually enters old_price
  3. User enters discount % → new_price auto-calculates
  4. On save → Model observer calculates new_price and saves both ✅

Scenario 3: Direct price entry
  1. User manually enters old_price
  2. User enters discount % → new_price auto-calculates
  3. On save → Model observer saves both to DB ✅

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⚠️  EXISTING SALES:

Status: Could not auto-fix existing 3 sales
Reason: Units have no prices (normal_price = NULL)

To fix existing sales:
1. Option A: Manually edit each sale in Filament and enter old_price
2. Option B: First populate unit prices, then run fix script again
3. Option C: Delete and recreate sales with correct prices

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 RECOMMENDATIONS:

1. Populate Unit Prices
   Many units in the database have NULL prices. Consider:
   - Importing unit prices from source data
   - Updating units to include normal_price values
   - This will enable automatic price calculation for sales

2. Test New Sales
   - Create a new sale in Filament
   - Manually enter old_price (since units have no prices)
   - Enter discount %
   - Verify old_price and new_price save to database

3. Filament Form Improvement (Optional)
   Consider making old_price field required when unit has no price:
   Location: app/Filament/Company/Resources/SaleResource.php line 103

   Change from:
   Forms\Components\TextInput::make('old_price')
       ->numeric()->prefix('EGP')
       ->helperText('Auto-filled from selected unit, or enter manually')

   To:
   Forms\Components\TextInput::make('old_price')
       ->required() // Make it required
       ->numeric()->prefix('EGP')
       ->helperText('Enter original price (unit has no price data)')

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 TESTING:

To test the fix:
1. Go to Filament → Discounts & Sales → Create New
2. Fill in sale details and select a unit
3. Manually enter old_price (e.g., 5000000)
4. Enter discount % (e.g., 20)
5. Save the sale
6. Check database:
   mysql> SELECT id, sale_name, old_price, new_price FROM sales WHERE id = X;

Expected Result:
  old_price should show the value you entered (5000000)
  new_price should show the calculated value (4000000)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📁 FILES MODIFIED:

  /var/www/realestate/app/Models/Sale.php          - Added boot() method
  /var/www/realestate/fix_existing_sales.php       - Script to fix existing
  /var/www/realestate/check_sale_prices.php        - Diagnostic script
  /var/www/realestate/SALE_PRICES_FIX_REPORT.txt   - This report

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Date: 2025-10-22
Status: ✅ FIX IMPLEMENTED - Model observer added to ensure prices save

╔═══════════════════════════════════════════════════════════════════════════╗
║  ✅ Future sales will now save old_price and new_price correctly!        ║
║  ⚠️  Existing 3 sales need manual price entry (units have no prices)     ║
╚═══════════════════════════════════════════════════════════════════════════╝
